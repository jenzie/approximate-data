<?xml version="1.0" encoding="UTF-8" standalone="yes"?> <unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="SciMark\array.cpp"> <unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="SciMark\array.cpp"><cpp:include>#<cpp:directive>include</cpp:directive>
<cpp:file>&lt;stdlib.h&gt;</cpp:file>
 <cpp:include>#<cpp:directive>include</cpp:directive>
<cpp:file>&lt;stdio.h&gt;</cpp:file>
 <cpp:include>#<cpp:directive>include</cpp:directive>
<cpp:file>"array.h"</cpp:file>
  <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive>
<name>NULL</name>
 <cpp:define>#<cpp:directive>define</cpp:directive>
<name>NULL</name>
 <cpp:endif>#<cpp:directive>endif</cpp:directive>
   <function><type><name>float</name>
</type>
<name>new_Array2D_double</name>
<parameter_list>(<param><decl><type><name>int</name>
</type>
<name>M</name>
</decl>
</param>
<param><decl><type><name>int</name>
</type>
<name>N</name>
</decl>
</param>
  <decl_stmt><decl><type><name>int</name>
</type>
<name>i</name>
<init><expr>0</expr>
</init>
</decl>
 <decl_stmt><decl><type><name>int</name>
</type>
<name>failed</name>
<init> <expr>0</expr>
</init>
</decl>
  <decl_stmt><decl><type><name>float</name>
</type>
<name>A</name>
<init> <expr>(<name>float</name>
<call><name>malloc</name>
<argument_list>(<argument><expr><call><name>sizeof</name>
<argument_list>(<argument><expr><name>float</name>
</expr>
</argument>
</argument_list>
</call>
<name>M</name>
</expr>
</argument>
</argument_list>
</call>
</expr>
</init>
</decl>
 <if>if <condition>(<expr><name>A</name>
<name>NULL</name>
</expr>
</condition>
 <return>return <expr><name>NULL</name>
</expr>
</return>
  <for>for (<init><expr><name>i</name>
</expr>
</init>
<condition><expr><name>i</name>
<name>M</name>
</expr>
</condition>
<incr><expr><name>i</name>
</expr>
  <expr_stmt><expr><name><name>A</name>
<index>[<expr><name>i</name>
</expr>
</index>
</name>
<name>float</name>
<call><name>malloc</name>
<argument_list>(<argument><expr><name>N</name>
<call><name>sizeof</name>
<argument_list>(<argument><expr><name>float</name>
</expr>
</argument>
</argument_list>
</call>
</expr>
</argument>
</argument_list>
</call>
</expr>
 <if>if <condition>(<expr><name><name>A</name>
<index>[<expr><name>i</name>
</expr>
</index>
</name>
<name>NULL</name>
</expr>
</condition>
  <expr_stmt><expr><name>failed</name>
</expr>
 <break>break;    <comment type="block">/* if we didn't successfully allocate all rows of A      */ <comment type="block">/* clean up any allocated memory (i.e. go back and free  */ <comment type="block">/* previous rows) and return NULL                        */  <if>if <condition>(<expr><name>failed</name>
</expr>
</condition>
  <expr_stmt><expr><name>i</name>
</expr>
 <for>for (<init>;</init>
<condition><expr><name>i</name>
</expr>
</condition>
<incr><expr><name>i</name>
</expr>
 <expr_stmt><expr><call><name>free</name>
<argument_list>(<argument><expr><name><name>A</name>
<index>[<expr><name>i</name>
</expr>
</index>
</name>
</expr>
</argument>
</argument_list>
</call>
</expr>
</expr_stmt>
 <expr_stmt><expr><call><name>free</name>
<argument_list>(<argument><expr><name>A</name>
</expr>
</argument>
</argument_list>
</call>
</expr>
 <return>return <expr><name>NULL</name>
</expr>
   <return>return <expr><name>A</name>
</expr>
</return>
  <function><type><name>void</name>
</type>
<name>Array2D_double_delete</name>
<parameter_list>(<param><decl><type><name>int</name>
</type>
<name>M</name>
</decl>
</param>
<param><decl><type><name>int</name>
</type>
<name>N</name>
</decl>
</param>
<param><decl><type><name>float</name>
</type>
<name>A</name>
</decl>
</param>
  <decl_stmt><decl><type><name>int</name>
</type>
<name>i</name>
</decl>
 <if>if <condition>(<expr><name>A</name>
<name>NULL</name>
</expr>
</condition>
<then> <return>return;</return>
</then>
  <for>for (<init><expr><name>i</name>
</expr>
</init>
<condition><expr><name>i</name>
<name>M</name>
</expr>
</condition>
<incr><expr><name>i</name>
</expr>
 <expr_stmt><expr><call><name>free</name>
<argument_list>(<argument><expr><name><name>A</name>
<index>[<expr><name>i</name>
</expr>
</index>
</name>
</expr>
</argument>
</argument_list>
</call>
</expr>
</expr_stmt>
  <expr_stmt><expr><call><name>free</name>
<argument_list>(<argument><expr><name>A</name>
</expr>
</argument>
</argument_list>
</call>
</expr>
    <function><type><name>void</name>
</type>
<name>Array2D_double_copy</name>
<parameter_list>(<param><decl><type><name>int</name>
</type>
<name>M</name>
</decl>
</param>
<param><decl><type><name>int</name>
</type>
<name>N</name>
</decl>
</param>
<param><decl><type><name>float</name>
</type>
<name>B</name>
</decl>
</param>
<param><decl><type><name>float</name>
</type>
<name>A</name>
</decl>
</param>
   <decl_stmt><decl><type><name>int</name>
</type>
<name>remainder</name>
<init> <expr><name>N</name>
</expr>
</init>
</decl>
</decl_stmt>
<comment type="block">/* N mod 4; */ <decl_stmt><decl><type><name>int</name>
</type>
<name>i</name>
<init><expr>0</expr>
</init>
</decl>
 <decl_stmt><decl><type><name>int</name>
</type>
<name>j</name>
<init><expr>0</expr>
</init>
</decl>
  <for>for (<init><expr><name>i</name>
</expr>
</init>
<condition><expr><name>i</name>
<name>M</name>
</expr>
</condition>
<incr><expr><name>i</name>
</expr>
  <decl_stmt><decl><type><name>float</name>
</type>
<name>Bi</name>
<init> <expr><name><name>B</name>
<index>[<expr><name>i</name>
</expr>
</index>
</name>
</expr>
</init>
</decl>
 <decl_stmt><decl><type><name>float</name>
</type>
<name>Ai</name>
<init> <expr><name><name>A</name>
<index>[<expr><name>i</name>
</expr>
</index>
</name>
</expr>
</init>
</decl>
 <for>for (<init><expr><name>j</name>
</expr>
</init>
<condition><expr><name>j</name>
<name>remainder</name>
</expr>
</condition>
<incr><expr><name>j</name>
</expr>
 <expr_stmt><expr><name><name>Bi</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
<name><name>Ai</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
</expr>
</expr_stmt>
 <for>for (<init><expr><name>j</name>
<name>remainder</name>
</expr>
</init>
<condition><expr><name>j</name>
<name>N</name>
</expr>
</condition>
<incr><expr><name>j</name>
</expr>
  <expr_stmt><expr><name><name>Bi</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
<name><name>Ai</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
</expr>
 <expr_stmt><expr><name><name>Bi</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
<name><name>Ai</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
</expr>
 <expr_stmt><expr><name><name>Bi</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
<name><name>Ai</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
</expr>
 <expr_stmt><expr><name><name>Bi</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
<name><name>Ai</name>
<index>[<expr><name>j</name>
</expr>
</index>
</name>
</expr>
    </unit>